#!/bin/sh

######################################################################
# Prune undesired systemd.debug entries in kernels that are not
# marked for debugging. See Red Hat bugzilla 1285601.
######################################################################

PATH=/usr/bin
EPOCH_DATE=$(date +"%s")
LOG_DIR="/var/log"
LOG_FILE="${LOG_DIR}/grubby_prune_debug"

display_event()
{
    EVENT_LABEL="$1"
    EVENT_DATA="$2"
    JUSTIFIED_LABEL=$(printf "%-12s" "${EVENT_LABEL}")
    LOG_TIMESTAMP=$(date +"%s")
    echo "[${LOG_TIMESTAMP}] ${JUSTIFIED_LABEL}: ${EVENT_DATA}" >> "${LOG_FILE}"
}

exit_event()
{
    display_event "Exit" "Exiting script"
    exit $1
}

[ -d "${LOG_DIR}" ] || mkdir -p -m 0755 "${LOG_DIR}"
display_event "Start" "Begin search for extraneous debug arguments"

if [ $(id -u) -ne 0 ]; then
    display_event "Error" "This script may only run as root."
    exit_event 0
fi

######################################################################
# Back up the grub.cfg for sanity
######################################################################
GRUB_CFG=
GRUB_CFG_BK=
GRUB_EFI_CFG=
GRUB_EFI_CFG_BK=

if [ -f "/etc/grub2.cfg" ]; then
    GRUB_CFG=$(realpath "/etc/grub2.cfg")
    GRUB_CFG_BK="${GRUB_CFG}.${EPOCH_DATE}.rpmsave"
fi

if [ -f "/etc/grub2-efi.cfg" ]; then
    GRUB_EFI_CFG=$(realpath "/etc/grub2-efi.cfg")
    GRUB_EFI_CFG_BK="${GRUB_EFI_CFG}.${EPOCH_DATE}.rpmsave"
fi

if [ -z "${GRUB_EFI_CFG}" ] && [ -z "${GRUB_CFG}" ]; then
    display_event "Error" "Could not find a grub configuration to back up"
    exit_event 0
fi

if [ -f "${GRUB_EFI_CFG}" ]; then
    if cp -a "${GRUB_EFI_CFG}" "${GRUB_EFI_CFG_BK}" 2> /dev/null; then
        display_event "Copied" \
            "Current configuration backed up to ${GRUB_EFI_CFG_BK}"
    else
        display_event "Error" "Could not write ${GRUB_EFI_CFG_BK}"
        exit_event 0
    fi
fi

if [ -f "${GRUB_CFG}" ]; then
    if cp -a "${GRUB_CFG}" "${GRUB_CFG_BK}" 2> /dev/null; then
        display_event "Copied" \
            "Current configuration backed up to ${GRUB_CFG_BK}"
    else
        display_event "Error" "Could not write ${GRUB_CFG_BK}"
        exit_event 0
    fi
fi


######################################################################
# Remove the systemd.debug kernel arguments from non-debug kernels
######################################################################
for entry_index in $(grubby --info=ALL|grep "^index="| sed 's/^index=//') ; do
    INDEX_TITLE=$(grubby --info="${entry_index}" 2> /dev/null |grep "^title=" | sed 's/^title=//')

    # do not do anything if this was empty
    [ -z "${INDEX_TITLE}" ] && continue

    display_event "Examine" "${INDEX_TITLE}"

    if echo "${INDEX_TITLE}" | grep -q "with debugging$"; then
        display_event "Keep" "Keep debugging arguments for ${INDEX_TITLE}"
        continue
    fi

    KERNEL_ARGS=$(grubby --info="${entry_index}" 2> /dev/null |grep "^args=")

    if echo "${KERNEL_ARGS}" | grep -q "systemd\.debug"; then
        if grubby --update-kernel="${entry_index}" --remove-args="systemd.debug"; then
            display_event "Update" "Removed debugging arguments for ${INDEX_TITLE}"
        else
            display_event "Error" "grubby failed to remove debug argument from ${INDEX_TITLE}"
        fi
    else
        display_event "Skip" "No debugging arguments to remove for ${INDEX_TITLE}"
    fi
done

######################################################################
# The default entry should not have debugging statements
######################################################################

# source of ALLOW_DEBUGGING_DEFAULT
[ -f /etc/sysconfig/kernel ] && . /etc/sysconfig/kernel

CURRENT_DEFAULT_INDEX=$(grubby --default-index)
CURRENT_TITLE=$(grubby --info="${CURRENT_DEFAULT_INDEX}" 2> /dev/null |grep "^title=" | sed 's/^title=//')
CURRENT_KERNEL=$(grubby --info="${CURRENT_DEFAULT_INDEX}" 2> /dev/null |grep "^kernel=" | sed 's/^kernel=//')
DEFAULT_CHANGED=0
if echo "${CURRENT_TITLE}" | grep -q "with debugging$"; then
    case "${ALLOW_DEBUGGING_DEFAULT}" in
        [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee])
            display_event "Examine" "Detected user preference to allow debugging default entries if present"
            exit_event 0
            ;;
    esac
    display_event "Examine" "Search for entry without debugging to replace default entry - ${CURRENT_TITLE}"

    # search for the first non-debugging kernel entry with the same kernel as current
    for entry_index in $(grubby --info="${CURRENT_KERNEL}"| grep "^index" | sed 's/^index=//')
    do
        INDEX_TITLE=$(grubby --info="${entry_index}" 2> /dev/null |grep "^title=" | sed 's/^title=//')
        display_event "Examine" "Checking index ${entry_index} - ${INDEX_TITLE} for suitability"

        # skip if it's a debugging kernel
        if echo "${INDEX_TITLE}" | grep -q "with debugging$"; then
            display_event "Denied" "${INDEX_TITLE} evaluated and skipped because it is marked debugging"
            continue
        fi

        # also skip if it's got debugging arguments
        KERNEL_ARGS=$(grubby --info="${entry_index}" 2> /dev/null |grep "^args=")
        if echo "${KERNEL_ARGS}" | grep -q "systemd\.debug"; then
            display_event "Denied" "${INDEX_TITLE} evaluated and skipped because it contains debugging kernel arguments"
            continue
        fi

        if grubby --set-default-index="${entry_index}"; then
            display_event "Update" "Selected ${INDEX_TITLE} as the new default entry"
            DEFAULT_CHANGED=1
            break
        else
            display_event "Error" "Could not set ${INDEX_TITLE} as default, continuing search"
        fi
    done

    if [ ${DEFAULT_CHANGED} -eq 0 ]; then
        display_event "Error" "Could not find a suitable default entry without debugging"
    fi
fi

exit_event 0
